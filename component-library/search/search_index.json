{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-\\.,!=\\[\\]()\"`/]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"alert/","title":"Alert","text":"<p>LWC for SLDS Alert.</p>"},{"location":"alert/#specification","title":"Specification","text":"<p>Alert banners communicate a state that affects the entire system, not just a feature or page. It persists over a session and appears without the user initiating the action.</p>"},{"location":"alert/#attributes","title":"Attributes","text":"Name Type Required Default Description variant info / warning / error / offline info Variant of the alert. closeable boolean false If true, the alert can be closed by a user action. hidden boolean false Show/hide the alert. iconDescription string Icon title."},{"location":"alert/#example","title":"Example","text":"<pre><code>&lt;c-alert variant=\"warning\"&gt;Alert message or component.&lt;/c-alert&gt;\n</code></pre>"},{"location":"alert/#installation","title":"Installation","text":"<p>Components</p> <ul> <li>lwc/alert</li> </ul> <p>Deploy Alert:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name component-library \\\n    --source-dir src/library/lwc/alert/ \\\n    -o my-org\n</code></pre>"},{"location":"error-handler/","title":"Error Handler","text":"<p>Handle errors and show either a toast or error prompt to a user.</p>"},{"location":"error-handler/#specification","title":"Specification","text":"<p>Handle errors including unexpected errors, LWC/JS errors, custom errors from Apex.</p> <p>See LightningResponse to add support for <code>{ error, data }</code> monads in Apex whose errors are supported by this handler as well.</p> <p>Error handler module provides:</p>"},{"location":"error-handler/#handleerror-function","title":"handleError function","text":"<p>Use <code>handleError</code> to process expected errors, usually the <code>error</code> from <code>{ data, errors }</code> response.</p>"},{"location":"error-handler/#somethingwentwrong-function","title":"somethingWentWrong function","text":"<p>Alternative to <code>handleError</code>. Use <code>somethingWentWrong</code> to process unexpected errors, usually in a generic try-catch. Always wrap your first functions in the try-catch to handle unexpected errors using the <code>somethingWentWrong</code> function, this way we can ensure the implementations details are hidden from users, including the native not-so-user-friendly LWC error modal. First function can be for example a lifecycle hook (constructor, renderedCallback), event handler (button clicked, custom event).</p>"},{"location":"error-handler/#createcustomerrorhandler-function","title":"createCustomErrorHandler function","text":"<p>Override the default behaviour across your org using a custom LWC error handler.</p> <p>Use cases:</p> <ol> <li>Always want to show an error modal instead of a toast.</li> <li>To add a custom button to the error modal to provide users a quick way to    open a support ticket.</li> </ol> <p>It's recommended to create a custom error handler, so you don't have to replace all the references in the future.</p>"},{"location":"error-handler/#exports","title":"Exports","text":"Name Arguments Returns Description handleError error: any, [options: LightningElement | ErrorHandlerOptions | undefined] undefined Handle error and show either a toast or an error prompt to a user."},{"location":"error-handler/#errorhandleroptions-type","title":"ErrorHandlerOptions Type","text":"Name Type Required Default Description element LightningElement true Usually the 'this' component. Required to show toast. type boolean Default is 'modal' for 'somethingWentWrong' and 'toast' for 'handleError'. disableDebounce boolean false By default, show only one error if multiple errors occurred at the same time. somethingWentWrongMessage string 'Something went wrong.' Generic message to show when unexpected error is handled. actions ErrorHandlerAction[] List of footer button actions. Available only in the prompt variant. logger Logger Logger. Default logger only prints to console. Provide custom logger to persist logs if needed."},{"location":"error-handler/#errorhandleraction-type","title":"ErrorHandlerAction type","text":"<p>List of footer button actions. Buttons rendered in the prompt variant only.</p> Name Type Required Default Description name string true The name for the button element. label boolean true The text to be displayed inside the button. variant boolean true The variant changes the appearance of the button. Variant of the lightning-button. onclick Function The function to be executed when the action is clicked."},{"location":"error-handler/#logger-type","title":"Logger type","text":"<p>Custom logger. Can be used for example to persist logs in database.</p> Name Type Required Default Description log ({error: any, ui: UiError}) =&gt; void true Log error. Argument \"error\" is the original error object, \"ui\" is the formatted error."},{"location":"error-handler/#uierror-type","title":"UiError type","text":"<p>Unified error used by the module to show the toast or prompt.</p> Name Type Required Default Description message string true Unified error message. payload string Unified error payload. stack string Unified error stack. hostName string Unified source component name. Not available in Lightning Locker."},{"location":"error-handler/#example","title":"Example","text":""},{"location":"error-handler/#core-features","title":"Core Features","text":"<p>Use <code>handleError</code> to show pretty error message when expected error occurs. Use <code>somethingWentWrong</code> to show pretty error message when unexpected error occurs.</p> <pre><code>import createContract from \"@salesforce/apex/CreateContractController.createContract\";\n\nimport { handleError, somethingWentWrong } from \"c/errorHandler\";\nimport { hideSpinner, showSpinner } from \"c/spinner\";\n\nexport default class CreateContract extends LightningElement {\n    async handleCreateContractClick() {\n        try {\n            // Show loading indicator.\n            await showSpinner(this);\n            const { data, error } = await createContract({\n                contract: this.contract\n            });\n            if (error) {\n                // Handle exepcted errors.\n                await handleError(error);\n            } else {\n                // Handle successful result.\n                const { contractId } = data;\n                contractCreated(contractId);\n            }\n        } catch (e) {\n            // Handle unexpected errors.\n            await somethingWentWrong(e, this);\n        } finally {\n            // Hide loading indicator.\n            await hideSpinner(this);\n        }\n    }\n}\n</code></pre>"},{"location":"error-handler/#lightning-error-handling-from-apex","title":"Lightning Error Handling from Apex","text":"<p><code>LightningError</code> can be used to build serialized error in <code>AuraEnabled</code> controllers. This error is then parsed and processed by <code>handleError</code> function.</p> <pre><code>// classes/GrantPartnerPortalAccessController.cls\n@AuraEnabled\npublic static LightningResponse grantPartnerPortalAccess(Id userId) {\n   try {\n      // Perform some operation.\n      AccessResult data = grantAccess(userId);\n      // Success response with optional data.\n      return LightningResponse.send(data);\n   } catch (AccessAlreadyGrantedException e) {\n      // Custom error message. Display a user-friendly message detailing the issue encountered.\n      return LightningResponse.error(System.Label.Partner_Portal_Access_Already_Granted);\n   } catch (UserNotEligibleForPartnerPortalException e) {\n      // Different custom error message.\n      return LightningResponse.error(System.Label.User_Not_Eligible_For_Partner_Portal);\n   } catch (Exception e) {\n      // Log the unexpected exception here. This is a bug!\n      // Unexpected error. Show generic error message.\n      // We don't want to show implementation details to end users.\n      return LightningResponse.somethingWentWrong(e);\n   }\n}\n</code></pre> <pre><code>// lwc/grantPortalAccess/grantPortalAccess.js\nimport grantPartnerPortalAccess from \"@salesforce/apex/GrantPartnerPortalAccessController.grantPartnerPortalAccess\";\n\nexport default class GrantPartnerPortalAccessModal extends LightningElement {\n    async grantPartnerPortalAccess(userId) {\n        await showSpinner(this);\n        try {\n            const { error, data } = await createUser({\n                userId\n            });\n            if (error) {\n                // Handle expected errors including\n                // Partner_Portal_Access_Already_Granted and\n                // User_Not_Eligible_For_Partner_Portal from our Apex example.\n                await handleError(error);\n            } else {\n                // Handle successful result,\n                // `data` will be of the AccessResult type from our Apex example.\n                const { contractId } = data;\n                contractCreated(contractId);\n            }\n        } catch (e) {\n            // Handle unexpected errors.\n            await somethingWentWrong(e, this);\n        } finally {\n            await hideSpinner(this);\n        }\n    }\n}\n</code></pre>"},{"location":"error-handler/#customize-options","title":"Customize Options","text":"<p>Override the default options, like disabling the debouncing, always showing a modal, changing the generic Something Went Wrong message etc.</p> <pre><code>export default class MyComponent extends LightningElement {\n    async doSomeStuff() {\n        try {\n            // Do your logic here.\n        } catch (e) {\n            await handleError(e, {\n                element: this,\n                // Here override the options you need to customize.\n                // Custom generic error message.\n                somethingWentWrongMessage:\n                    \"This should by a custom label with a fancy 'something went wrong' message.\",\n                // Always show modal, never toast.\n                type: \"modal\",\n                // Never debounce errors, always show all of them even if 100 of them occurs.\n                disableDebounce: true\n            });\n        }\n    }\n}\n</code></pre>"},{"location":"error-handler/#custom-error-handler","title":"Custom Error Handler","text":"<p>Create custom LWC component, you can name it for example <code>customErrorHandler</code>.</p> <p>Then instead of <code>import { handleError, somethingWentWrong } from 'c/errorHandler';</code> you will be using <code>from 'c/customErrorHandler';</code>.</p> <pre><code>// Custom error handler implementation.\n// Import generic features.\nimport { consoleLogger, createCustomErrorHandler } from \"c/errorHandler\";\n\n// Define custom handler.\nconst customHandler = createCustomErrorHandler({\n    // Here override the options you need to customize.\n    // Custom generic error message.\n    somethingWentWrongMessage:\n        \"This should by a custom label with a fancy 'something went wrong' message.\",\n    // Always show modal, never toast.\n    type: \"modal\",\n    // Custom prompt actions.\n    actions: [\n        {\n            name: \"openSupportTicket\",\n            label: \"Open Support Ticket\",\n            variant: \"brand\",\n            onclick: (actionName) =&gt; openSupportTicket()\n        }\n    ],\n    // Enhance logging.\n    logger: {\n        log: ({ error, ui }) =&gt; {\n            consoleLogger.log({ error, ui });\n            // todo Apex Logging\n        }\n    }\n});\n\n// Export custom handleError function.\nexport const handleError = (error, options) =&gt; {\n    return customHandler.handleError(error, options);\n};\n\n// Export custom somethingWentWrong function.\nexport const somethingWentWrong = (error, options) =&gt; {\n    return customHandler.somethingWentWrong(error, options);\n};\n</code></pre>"},{"location":"error-handler/#installation","title":"Installation","text":"<p>Components</p> <ul> <li>lwc/errorHandler</li> <li>lwc/errorHandlerModal</li> <li>classes/LightningError</li> <li>classes/LightningErrorTest</li> <li>classes/LightningResponse</li> <li>classes/LightningResponseTest</li> </ul> <p>Deploy JS module:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name component-library \\\n    --source-dir src/library/lwc/errorHandler \\\n    -o my-org\n</code></pre> <p>Deploy Apex module:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name component-library \\\n    -m ApexClass:LightningError \\\n    -m ApexClass:LightningErrorTest \\\n    -m ApexClass:LightningResponse \\\n    -m ApexClass:LightningResponseTest \\\n    -o my-org\n</code></pre>"},{"location":"json-preprocessor/","title":"JSON Preprocessor","text":"<p>Configurable JSON transformation in Apex.</p>"},{"location":"json-preprocessor/#specification","title":"Specification","text":"<p>This Apex service offers a variety of functionalities to ensure your JSON data is well-organized, matches the requested format and adheres to your preferred formatting standards.</p>"},{"location":"json-preprocessor/#fields","title":"Fields","text":"Field Name Type Default Description pretty Boolean false Prettify result JSON. replaceEmptyStringsWithNull Boolean false \"\" =&gt; null snakeCaseToCamelCase Boolean false some_key =&gt; someKey capitalizeFirstLetter Boolean false someKey =&gt; SomeKey uncapitalizeFirstLetter Boolean false SomeKey =&gt; someKey sortMapFields Boolean true Sort JSON keys. replaceFieldNamesMap Map&lt;String,String&gt; Map JSON keys to a different value. Can be used to change Apex reserved keyword fields before deserialization. datetimeFieldsToReformat Set&lt;String&gt; Collection of JSON keys holding datetime values to reformat. datetimeFormat String Datetime format used for datetimeFieldToReformat JSON fields. sourceTimeZone TimeZone UTC Original datetime time zone. targetTimeZone TimeZone UTC Target datetime time zone."},{"location":"json-preprocessor/#constructors","title":"Constructors","text":"Params Description The result JSON won't be prettified Boolean pretty The result JSON will be prettified"},{"location":"json-preprocessor/#methods","title":"Methods","text":"Method Params Returns Description process String jsonString String Process JSON and return a new JSON string."},{"location":"json-preprocessor/#example","title":"Example","text":"<p>In the example below, we would like to prepare a JSON for deserialization into an Apex object. We would like to change the original JSON in two ways:</p> <ol> <li>Change the field names from snake case to camel case to follow PMDs field    naming conventions.</li> <li>Change the \"number\" field name because it's a reserved word in Apex.</li> </ol> <pre><code>JsonPreprocessor processor = new JsonPreprocessor();\nprocessor.snakeCaseToCamelCase = true;\nprocessor.replaceFieldNamesMap.put('number', 'number_x');\n\nString originalJson = '{\"some_key\":\"myValue\",\"number\":150}';\nString processedJson = processor.process(originalJson);\n// {\"someKey:\"myValue\",\"number_x\":150}\n</code></pre>"},{"location":"json-preprocessor/#replace-empty-strings-with-null","title":"Replace Empty Strings with Null","text":"<pre><code>processor.replaceEmptyStringsWithNull = true;\nString originalJson = '{\"key\":\"\"}';\nString processedJson = processor.process(originalJson);\n// {\"key\":null}\n</code></pre>"},{"location":"json-preprocessor/#snake-case-to-camel-case","title":"Snake Case to Camel Case","text":"<pre><code>processor.snakeCaseToCamelCase = true;\nString originalJson = '{\"some_key\":\"myValue\"}';\nString processedJson = processor.process(originalJson);\n// {\"someKey\":\"myValue\"}\n</code></pre>"},{"location":"json-preprocessor/#capitalize-and-uncapitalize-first-letter","title":"Capitalize and Uncapitalize First Letter","text":"<pre><code>processor.capitalizeFirstLetter = true;\nString originalJson = '{\"someKey\":\"myValue\"}';\nString processedJson = processor.process(originalJson);\n// {\"SomeKey\":\"myValue\"}\n\nprocessor.uncapitalizeFirstLetter = true;\nString originalJson = '{\"SomeKey\":\"myValue\"}';\nString processedJson = processor.process(originalJson);\n// {\"someKey\":\"myValue\"}\n</code></pre>"},{"location":"json-preprocessor/#sort-map-fields","title":"Sort Map Fields","text":"<pre><code>processor.sortMapFields = true;\nString originalJson = '{\"b\":\"myValue2\",\"a\":\"myValue\"}';\nString processedJson = processor.process(originalJson);\n// {\"a\":\"myValue\",\"b\":\"myValue2\"}\n</code></pre>"},{"location":"json-preprocessor/#replace-fields-by-name","title":"Replace Fields By Name","text":"<pre><code>processor.replaceFieldNamesMap.put('number', 'ticketNumber');\nprocessor.replaceFieldNamesMap.put('string', 'string_x');\nString originalJson = '{\"number\":150,\"string\":\"myValue\"}';\nString processedJson = processor.process(originalJson);\n// {\"ticketNumber\":150,\"string_x\":\"myValue\"}\n</code></pre>"},{"location":"json-preprocessor/#remove-fields-by-name","title":"Remove Fields By Name","text":"<pre><code>processor.fieldNamesToRemove.add('number');\nString originalJson = '{\"size\":2,\"result\":[{\"number\": \"ABC0001234\",\"description\": \"desc1\"},{\"description\": \"\", \"number\": \"ABC0004567\"}]}';\nString processedJson = processor.process(originalJson);\n// {\"size\":2,\"result\":[{\"description\":\"desc1\"},{\"description\":\"\"}]}\n</code></pre>"},{"location":"json-preprocessor/#reformat-datetime-values","title":"Reformat Datetime Values","text":"<p>Let's say in our REST response we have datetime value in Los Angeles time zone, and we are planning to deserialize this JSON into UTC.</p> <p>Simple example: reformat long datetime.</p> <pre><code>processor.datetimeFieldsToReformat.add('dt');\nString originalJson = '{\"dt\":1719138444559}';\nString result = processor.process(originalJson);\n// {\"dt\":\"2024-06-23T10:27:24Z\"}\n</code></pre> <p>Convert time zones and use custom datetime format example.</p> <pre><code>processor.datetimeFieldsToReformat.add('dt');\n// Default format is yyyy-MM-ddTHH:mm:ssZ\nprocessor.datetimeFormat = 'yyyy-MM-dd\\'T\\'HH:mm:ss.SSSZ';\n// UTC is a default value for both source and target time zone.\nprocessor.sourceTimeZone = TimeZone.getTimeZone('America/Los_Angeles');\nprocessor.targetTimeZone = TimeZone.getTimeZone('UTC');\nString originalJson = '{\"dt\":\"2022-12-15 04:15:30\"}';\nString result = processor.process(originalJson);\n// {\"dt\":\"2022-12-15T12:15:30.000+0000\"}\n</code></pre>"},{"location":"json-preprocessor/#installation","title":"Installation","text":"<p>Components</p> <ul> <li>classes/JsonPreprocessor</li> <li>classes/JsonPreprocessorTest</li> </ul> <p>Deploy preprocessor:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name component-library \\\n    -m ApexClass:JsonPreprocessor \\\n    -m ApexClass:JsonPreprocessorTest \\\n    -o my-org\n</code></pre>"},{"location":"lightning-error/","title":"Lightning Error","text":"<p>Streamlined error handling from Apex controllers.</p>"},{"location":"lightning-error/#specification","title":"Specification","text":"<p>Helps to display user-friendly error messages in LWC, by providing a response monad <code>{ error, data }</code>.</p> <p>This class represents the <code>error</code> in the <code>{ error, data }</code>.</p> <p>See LightningResponse for <code>{ error, data }</code> Apex documentation.</p> <p>See how to handle errors in LWC using errorHandler service.</p>"},{"location":"lightning-error/#static-factories","title":"Static Factories","text":"Method Params Returns Description create LightningError Factory method. create String message LightningError Factory method with custom error message. create DmlException e LightningError Factory method to build the error from a DmlException."},{"location":"lightning-error/#methods","title":"Methods","text":"Method Params Returns Description addError String message LightningError Add error. addFieldError SObjectField field, String message LightningError Add field error. addFieldError SObjectField field, String message, String errorCode LightningError Add field error including custom error code, usually a System.StatusCode value. setMessage String message LightningError Set error message. setStatusCode Integer statusCode LightningError Default: 400. setErrorCode String errorCode LightningError Set error code."},{"location":"lightning-error/#example","title":"Example","text":"<p>See more examples in the LightningResponse docs.</p>"},{"location":"lightning-error/#installation","title":"Installation","text":"<p>Components</p> <ul> <li>classes/LightningError</li> <li>classes/LightningErrorTest</li> </ul> <p>Ideally deploy everything defined in the errorHandler</p> <p>or deploy just this module:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name component-library \\\n    -m ApexClass:LightningError \\\n    -m ApexClass:LightningErrorTest\n    -o my-org\n</code></pre>"},{"location":"lightning-response/","title":"Lightning Response","text":"<p>Streamlined response handling from Apex controllers.</p>"},{"location":"lightning-response/#specification","title":"Specification","text":"<p>Helps to provide a structured response from Apex controller, by leveraging a response monad <code>{ error, data }</code>.</p> <p>This class represents the <code>{ error, data }</code> response.</p> <p>See LightningError for the <code>error</code> in the <code>{ error, data }</code> Apex documentation.</p> <p>See how to handle errors in LWC using errorHandler service.</p>"},{"location":"lightning-response/#static-factories","title":"Static Factories","text":"Method Params Returns Description send LightningResponse Create successful response send Object responseData LightningResponse Create successful response error String errorMessage LightningResponse Create error response error LightningError error LightningResponse Create error response { data: null, error: error } where error is a structured LightningError. somethingWentWrong Exception e LightningResponse Either throws AuraHandleException for unknown issues to hide the implementation details to end users. Or creates error response { data: null, error: error } where error is a structured LightningError with details from specific exceptions, like DmlException."},{"location":"lightning-response/#example","title":"Example","text":"<pre><code>// classes/GrantPartnerPortalAccessController.cls\n@AuraEnabled\npublic static LightningResponse grantPartnerPortalAccess(Id userId) {\n    try {\n        // Perform some operation.\n        AccessResult data = grantAccess(userId);\n        // Success response with optional data.\n        // { data: data, error: null }\n        return LightningResponse.send(data);\n    } catch (AccessAlreadyGrantedException e) {\n        // Custom error message. Display a user-friendly message detailing the issue encountered.\n        // { data: null, error: Partner_Portal_Access_Already_Granted }\n        return LightningResponse.error(System.Label.Partner_Portal_Access_Already_Granted);\n    } catch (UserNotEligibleForPartnerPortalException e) {\n        // Different custom error message.\n        // { data: null, error: User_Not_Eligible_For_Partner_Portal }\n        return LightningResponse.error(System.Label.User_Not_Eligible_For_Partner_Portal);\n    } catch (Exception e) {\n        // Log the unexpected exception here. This is a bug!\n        // Unexpected error. Show generic error message.\n        // We don't want to show implementation details to end users.\n        // In most cases, this will throw AuraHandleException and shows a generic error modal.\n        // In some cases, this will return a { data: null, error: error } with a user-friendly error message,\n        // for example when the exception is a DmlException with a custom validation message.\n        return LightningResponse.somethingWentWrong(e);\n    }\n}\n</code></pre>"},{"location":"lightning-response/#installation","title":"Installation","text":"<p>Components</p> <ul> <li>classes/LightningError</li> <li>classes/LightningErrorTest</li> <li>classes/LightningResponse</li> <li>classes/LightningResponseTest</li> </ul> <p>Ideally deploy everything defined in the errorHandler</p> <p>or deploy just this module:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name component-library \\\n    -m ApexClass:LightningError \\\n    -m ApexClass:LightningErrorTest \\\n    -m ApexClass:LightningResponse \\\n    -m ApexClass:LightningResponseTest \\\n    -o my-org\n</code></pre>"},{"location":"spinner/","title":"Spinner","text":"<p>Displays an animated spinner.</p> <p>Spinners are a loading indicators that should be shown when retrieving data or performing slow computations. Showing and hiding spinner works immediately.</p>"},{"location":"spinner/#specification","title":"Specification","text":"<p>Use the exported showSpinner/hideSpinner functions instead of the api show/hide methods to select the c-spinner component automatically.</p>"},{"location":"spinner/#exports","title":"Exports","text":"Name Arguments Returns Description showSpinner component (LightningElement) Promise Select the c-spinner in the component's markup and show the spinner. The component argument is usually 'this'. hideSpinner component (LightningElement) Promise Select the c-spinner in the component's markup and hide the spinner. The component argument is usually 'this'."},{"location":"spinner/#methods","title":"Methods","text":"Name Arguments Returns Description show Promise Show the spinner over its slotted content. Use the exported showSpinner function to get the c-spinner component, and to call the show method automatically. hide Promise Hide the spinner. Use the exported hideSpinner function to get the c-spinner component, and to call the hide method automatically."},{"location":"spinner/#example","title":"Example","text":"<pre><code>&lt;div class=\"slds-is-relative\"&gt;\n    &lt;c-spinner&gt;\n        &lt;!-- your content to show spinner over --&gt;\n    &lt;/c-spinner&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>import { handleError } from \"c/errorHandler\";\nimport { hideSpinner, showSpinner } from \"c/spinner\";\n\ntry {\n    await showSpinner(this);\n    // Do your operation here.\n} catch (e) {\n    handleError(e, { element: this });\n} finally {\n    await hideSpinner(this);\n}\n</code></pre>"},{"location":"spinner/#installation","title":"Installation","text":"<p>Components</p> <ul> <li>lwc/spinner</li> </ul> <p>Deploy Spinner:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name component-library \\\n    --source-dir src/library/lwc/spinner/ \\\n    -o my-org\n</code></pre>"},{"location":"overview/components/","title":"Component Library","text":"<p>Custom Salesforce LWC and Apex Components.</p> Apex Lightning Web Components"}]}