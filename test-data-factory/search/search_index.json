{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-\\.,!=\\[\\]()\"`/]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#test-data-factory","title":"Test Data Factory","text":"<p>Seamless creation of SObject records for unit tests.</p> <p>Features:</p> <ul> <li>Built-in and Customizable Factory: Provides an out-of-the-box SObject     factory, with an extensible base to define custom record templates.</li> <li>Automatic Population of Required Fields: Ensures mandatory fields are     pre-populated.</li> <li>Support for Read-Only Fields: Includes options to set values for     read-only fields, including system fields, formula fields, and child     records.</li> <li>Managed Package Compatibility: Fully supports managed package records.</li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>// Use custom AccountFactory implementation with default account template.\nAccount account = (Account) new AccountFactory()\n        // Make 1 mocked account with ID without DML.\n        .mocked()\n        // Override LastModifiedDate system value.\n        .setReadOnly(Schema.Account.LastModifiedDate, mockedDatetime)\n        // Override Name via test-specific target account record.\n        .build(new Account(Name = 'Target Name'))\n        .toSObject();\n\nAssert.isNotNull(account.Id, 'Account ID was not mocked.');\n\n// Use out-of-the-box generic contact factory.\nList&lt;Contact&gt; contacts = (List&lt;Contact&gt;) new sobj.BaseSObjectFactory()\n        // Create 5 contacts.\n        .created(5)\n        // Set Account relationship via test-specific  target contact record.\n        .build(new Contact(\n                AccountId = anotherAcc,\n                Description = 'Contact with mocked account example.'\n        ))\n        .toList();\n\nAssert.areEqual(5, contacts.size(), 'Expected number of contacts not created.');\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>You can either install our free Managed Package or deploy code unpackaged.</p> <p>Version ID: 04tJ80000000RPFIA2</p>"},{"location":"#managed-package","title":"Managed Package","text":"<p>Install Managed Package using this URL:</p> <pre><code>https://login.salesforce.com/packaging/installPackage.apexp?p0=04tJ80000000RPFIA2\n</code></pre> <p>or using sf cli:</p> <pre><code>sf package install -p 04tJ80000000RPFIA2 -o my-org\n</code></pre>"},{"location":"#unpackaged","title":"Unpackaged","text":"<p>Use our sfdx plugin to install all components in the <code>src/sobj/core/</code> and <code>src/sobj/example/</code> without cloning:</p> <pre><code>sf kratapps remote deploy start \\\n    --repo-owner kratapps \\\n    --repo-name test-data-factory \\\n    --source-dir src/sobj/core/ \\\n    --source-dir src/sobj/example/ \\\n    -o my-org\n</code></pre> <p>or clone the project and deploy using standard sf command:</p> <pre><code>git clone https://github.com/kratapps/test-data-factory.git\ncd test-data-factory\nsf project deploy start \\\n    --source-dir src/sobj/core/ \\\n    --source-dir src/sobj/example/ \\\n    -o my-org\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>You can create records using the TDF immediately in small projects or sObjects that are created only occasionally in unit tests. For other cases, we recommend extending <code>SObjectFactory</code> and/or <code>SObjectFactoryScenario</code> for each sObject type. <code>SObjectFactory/SObjectFactoryScenario</code> gives you more flexibility.</p>"},{"location":"#operations","title":"Operations","text":"<p>Choose one of these operations: create, mock and insert. Prefer crete or mock over insert to improve performance by avoiding DML.</p> <p>Usage Recommendation: Select one of the following operations for making test data: <code>create</code>, <code>mock</code>, or <code>insert</code>.</p> <ul> <li>create: Generates <code>sObject</code> records without DML.</li> <li>mock: Mocks <code>sObject</code> records, avoiding DML and providing mock IDs.</li> <li>insert: Executes DML to insert records.</li> </ul> <p>Favor <code>create</code> or <code>mock</code> over <code>insert</code> to improve performance by minimizing DML operations.</p> create mock insert Performance fast fast slower With IDs \u2715 \u2713 \u2713 Queryable \u2715 \u2715 \u2713 Custom Settings \u2713 \u2713 \u2713 Custom Metadata \u2713 \u2713 \u2715"},{"location":"#custom-template-sobject-factory","title":"Custom Template SObject Factory","text":"<p>You can either use generic sobj.BaseSObjectFactory implementation to make your records or ideally implement a SObject factory template for your SObjects.</p> <p>Main benefit on implementing templates is to provide a blueprint of your records to all apex tests. These blueprints/templates are called <code>defaults</code>. Each apex test can then override <code>defaults</code> using a <code>target</code> record, provided via <code>build</code> method.</p>"},{"location":"#template-example-implementation","title":"Template Example Implementation","text":"<p>Template SObject factory class extends <code>sobj.BaseSObjectFactory</code>. Then in your apex test use your template factory instead of base SObject factory.</p> <ul> <li>Usage of custom template factory: <code>new ContactFactory().created()</code></li> <li>Usage of base factory: <code>new sobj.BaseSObjectFactory().created()</code></li> </ul> <pre><code>@IsTest\npublic without sharing class ContactFactory extends sobj.BaseSObjectFactory {\n    // Create template defaults, common for all tests using ContactFactory.\n    public SObject createDefaults(SObject target) {\n        return new Contact(FirstName = 'Jon', LastName = 'Doe', Email = 'jdoe@acme.com');\n    }\n\n    // Prepare required parent records.\n    public override SObject makeParent(SObjectField sObjectField, SObject target) {\n        if (sObjectField == Contact.AccountId) {\n            return new AccountFactory().inserted().build(new Account()).toSObject();\n        }\n        return null;\n    }\n\n    // We can include test method to verify a record is insertable without errors.\n    @IsTest\n    static void testInsert() {\n        Contact contact = (Contact) new ContactFactory().inserted().build(new Contact()).toSObject();\n        Assert.isNotNull(contact.Id, 'Record not inserted.');\n    }\n}\n</code></pre>"},{"location":"#template-methods","title":"Template Methods","text":"<ul> <li> <p>createDefaults     This method creates a new record with default values. Avoid any DML     Operation here as it is called for every sObject created.</p> </li> <li> <p>makeParent (optional)     This method is called only once for each relationship.     The parent should be created in this method, because the method is not     called for records that already have the parent. This way you can reduce     redundant DML statements.</p> </li> <li> <p>getDmlOptions (optional)     Every factory comes with DML Options, default DML Options have     <code>duplicateRuleHeader.allowSave</code> set to true.     You can override this behavior.</p> </li> <li> <p>requireRecordType (optional)     If sObject has record types, it is enforced to set the RecordTypeId in unit     tests.     You can disable this feature by overriding this method.</p> </li> <li> <p>autoPopulateRequiredFields (optional)     Auto-population of required fields. This feature is not deterministic and     can have impact on performance. Disabled by default.</p> </li> </ul>"},{"location":"#features","title":"Features","text":""},{"location":"#created-vs-mocked-vs-inserted","title":"Created vs Mocked vs Inserted","text":"<p>Create</p> <pre><code>Account account = (Account) new sobj.BaseSObjectFactory\n        .created()\n        .build(new Account())\n        .toSObject();\nAssert.isNull(account.Id, 'Record should not have ID.');\n</code></pre> <p>Mock</p> <pre><code>Account account = (Account) new sobj.BaseSObjectFactory\n        .mocked()\n        .build(new Account())\n        .toSObject();\nAssert.isNotNull(account.Id, 'Record should have mock ID.');\n</code></pre> <p>Insert</p> <pre><code>Account account = (Account) new sobj.BaseSObjectFactory\n        .inserted()\n        .build(new Account())\n        .toSObject();\nAssert.isNotNull(account.Id, 'Record should have real ID.');\n</code></pre>"},{"location":"#build-single-vs-multiple-records","title":"Build Single vs Multiple Records","text":"<p>Create one record and cast to SObject.</p> <pre><code>Account account = (Account) new sobj.BaseSObjectFactory\n        .created()\n        .build(new Account())\n        .toSObject();\n</code></pre> <p>Create one record and cast to a list.</p> <pre><code>List&lt;Account&gt; accounts = (List&lt;Account&gt;) new sobj.BaseSObjectFactory\n        .created()\n        .build(new Account())\n        .toList();\nAssert.areEqual(1, accounts.size(), 'Different number of records created.');\n</code></pre> <p>Create 200 records and cast to a list.</p> <pre><code>List&lt;Account&gt; accounts = (List&lt;Account&gt;) new sobj.BaseSObjectFactory\n        .created(200)\n        .build(new Account())\n        .toList();\nAssert.areEqual(200, accounts.size(), 'Different number of records created.');\n</code></pre>"},{"location":"#set-required-fields","title":"Set Required Fields","text":"<pre><code>Account account = (Account) new sobj.BaseSObjectFactory\n        .created()\n        .setRequiredFields()\n        .build(new Account())\n        .toList();\nAssert.isNotNull(account.RequiredField__c, 'Required field not populated.');\n</code></pre>"},{"location":"#set-read-only-fields","title":"Set Read Only Fields","text":"<pre><code>Datetime mockedDatetime = Datetime.now();\nAccount account = (Account) new sobj.BaseSObjectFactory\n        .created()\n        .setReadOnly(Schema.Account.LastModifiedDate, mockedDatetime)\n        .build(new Account())\n        .toList();\nAssert.areEqual(mockedDatetime, account.LastModifiedDate, 'Read only field not populated.');\n</code></pre>"},{"location":"#set-children","title":"Set Children","text":"<p>Simple use case for injecting related list records. Useful for mocking nested queries.</p> <pre><code>List&lt;Account&gt; children = (List&lt;Account&gt;) new sobj.BaseSObjectFactory()\n        .created(5)\n        .build(new Account(Name = 'child'))\n        .toList();\nAccount parent = (Account) new sobj.BaseSObjectFactory()\n        .created()\n        .setChildren(Account.ParentId, children)\n        .build(new Account(Name = 'parent'))\n        .toSObject();\nAssert.areEqual(5, parent.ChildAccounts.size(), 'Expected 5 child accounts populated.');\n</code></pre>"},{"location":"#utils","title":"Utils","text":"<p>Get mocked/inserted record by ID.</p> <pre><code>Id recordId = sobj.MockId.getMockId(Account.SObjectType);\n</code></pre> <p>Generate and set mock ID to a list of records.</p> <pre><code>sobj.MockId.setMockIds(accountList);\n</code></pre>"},{"location":"#best-practices","title":"Best Practices","text":"<p>Common best practices while using this TDF.</p>"},{"location":"#insertable-records","title":"Insertable records","text":"<p>You should be able to insert every record without providing any values in the call. The following snippet should work in every unit test for all SObjects:</p> <pre><code>Contact contact = (Contact) new ContactFactory().inserted().build(new Contact()).toSObject();\nAssert.isNotNull(contact.Id, 'Record not inserted.');\n</code></pre>"},{"location":"#disable-auto-populate-required-fields","title":"Disable auto populate required fields","text":"<p>For SObjects with numerous fields, disable auto-population of required fields to enhance performance.</p>"},{"location":"license/","title":"BSD 3-Clause License","text":"<p>Copyright \u00a9 <code>2021</code>, <code>kratapps.com</code> All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the documentation    and/or other materials provided with the distribution.</li> <li>Neither the name of the <code>kratapps.com</code> nor the names of its contributors may    be used to endorse or promote products derived from this software without    specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"docs/release-notes/1.4/","title":"1.4","text":"<p>Version ID: 04t09000000vCWn</p> <ul> <li>Fix issue #3 -     Values defaulted on created are ignored.</li> <li>Change the default value for all standard Quantity fields from 0 to 1.</li> <li>Enhance the default SObject factory to support more standard objects out of     the box.</li> <li>Add unit tests to cover more standard objects.</li> <li>Add a unit test to test managed package records.</li> </ul>"},{"location":"docs/release-notes/2.0/","title":"2.0","text":"<p>Version ID: 04tJ80000000RPFIA2</p> <ul> <li>Complete refactoring.</li> <li>Add <code>sobj.BaseSObjectFactory</code> with a new builder pattern.</li> <li>Add features:<ul> <li>created/mocked/inserted</li> <li>setChildren</li> <li>setRequiredFields</li> <li>setReadOnly</li> </ul> </li> </ul>"},{"location":"docs/release-notes/latest/","title":"2.0","text":"<p>Version ID: 04tJ80000000RPFIA2</p> <ul> <li>Complete refactoring.</li> <li>Add <code>sobj.BaseSObjectFactory</code> with a new builder pattern.</li> <li>Add features:<ul> <li>created/mocked/inserted</li> <li>setChildren</li> <li>setRequiredFields</li> <li>setReadOnly</li> </ul> </li> </ul>"}]}